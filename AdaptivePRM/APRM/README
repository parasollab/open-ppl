Overview
========

This code implements the Customizable PRM framework (CPRM) presented in 
"Customizing PRM Roadmaps at Query Time" ICRA'01. A copy of the paper can 
be found at http://parasol-www.cs.tamu.edu/dsmft/publications.shtml under 
"PRM Optimizations and Techniques".

CPRM has two main features:

1. Approximate Roadmap Construction
      This allows you to build an approximate (or "coarse") roadmap. Then 
   this roadmap is refined during the query stage. This technique 
   dramatically reduces roadmap construction time while only slightly 
   increasing query time. (This idea is also present in LazyPRM and 
   FuzzyPRM.) In order for this to work, the OBPRM library must be 
   compiled with CHECKIFSAMECC=0.

2. Variable Query Requirements
      You can use the SAME roadmap to find paths with DIFFERENT query 
   requirements. This is much faster than building a separate roadmap for 
   each set of query requirements. Common query requirements include:
   * Resolution: You can specify a different resolution for collision 
                 checking than was used to build the roadmap.

   * Clearance: You can specify a minimum clearance that the robot must 
                maintain along a solution path.

   * Rotation: You can specify a maximum rotation for the robot. (This 
               corresponds to the robot's "yaw".)

   * Tilting: You can specify minimum and maximum tilt angles. (The tilt 
              angle corresponds to the robot's "pitch" and "roll".)

   * Potential: Applies only to bio applications (i.e. ligand binding, 
                protein folding). You can specify the maximum potential 
                energy allowed. This assumes that the 
                ApproxCSpaceClearance function in the Cfg class has been 
                overridden to calculate potential energy.

   * Collision: You can specify whether or not to check for collision. 
                The default value (1) will check for collision.

   (See the section "Specifying Query Requirements" for more information.)


Building an Approximate Roadmap
===============================

Roadmap construction has two new input flags:
  -validateNodes STRING
  -validateEdges STRING

-validateNodes determines how nodes are checked. The three choices are: 
  complete -- checks for collision (default)
  none -- adds all nodes to roadmap
  approximate -- same as complete for now

-validateEdges determines how edges are checked. The three choices are:
  complete -- checks entire edge for collision (default)
  none -- addes all edges to roadmap
  approximate INT -- checks edge at a lower resolution. INT [0,1] 
                     determines the level of resolution. 0 = no checking, 
                     1 = complete checking, 0.5 will check only half the 
                     nodes. The default is 0.1.


Querying the Roadmap
====================

The query stage has two new input flags:
  -validatePaths STRING
  -checkAllNodes INT

-validatePaths determines the order in which the edges in a solution path 
are checked (for collision and query requirements). The two options are:
  sequential -- traditional order, edges are checked in the order they 
                appear in the path from the start to the goal.
  priority -- uses the edge's weight to determine the order of checking. 
              The edge's weight corresponds to its probability of being 
              collision-free. Each edge in the solution path is placed in 
              a priority queue. The edge that is least likely to be 
              collision-free is removed from the queue and checked at a 
              higher resolution. A new edge weight is calculated and the 
              edge is reinserted into the queue. This process repeats 
              until a collision is found or all edges are found to be 
              collision-free. (See FuzzyPRM paper for more details.) 

-checkAllNodes is a boolean value. If 1, the nodes are first checked to 
see if they meet query requirements, then a path is searched for. If 0, 
only those nodes along solution paths are checked. The default value is 1.


Specifying Query Requirements
=============================

Query requirements are specified in an input file: 
"envName.query.requirement". This file should be in the same directory as 
the environment files. The file is as follows:
checkResolution RESOLUTION
checkClearance MIN_CLEARANCE
checkRotation MAX_ROTATION
checkTilting MIN_TILT MAX_TILT
checkPotential MAX_POTENTIAL
checkCollision

check* are boolean values, 0 or 1. Only include the other variables 
(RESOLUTION, MIN_CLEARANCE, etc.) if the particular boolean value is set 
to true. If checkCollision is not spefified, it is set to true.

Some notes about the variables:
  MIN_CLEARANCE is in environment units
  MAX_ROTATION is in ???
  MIN_TILT and MAX_TILT are in degrees, measured from the z-axis
  MAX_POTENTIAL is in KJ/mol

Sample query.reqirement file:
0
1 0.1
1 0.04
1 45 135
0

This sets checkResolution=false, checkClearance=true, MIN_CLEARANCE=0.1, 
checkRotation=true, MAX_ROTATION=0.04, checkTilting=true, MIN_TILT=45, 
MAX_TILT=135, checkPotential=false, and checkCollision=true (by default).


Implementing PRM Variations
===========================

Below are the input flag values for PRM and several popular variants. 
Default values are noted and do not need to be specified.

Traditional PRM:
   -validateNodes complete (default)
   -validateEdges complete (default)
   -validatePaths sequential (default)
   -checkAllNodes 0

CPRM:
   -validateNodes approximate 
   -validateEdges approximate INT 
   -validatePaths priority
   -checkAllNodes 1 (default)

LazyPRM:
   -validateNodes none
   -validateEdges none
   -validatePaths sequential (default)
   -checkAllNodes 0

FuzzyPRM:
   -validateNodes complete (default)
   -validateEdges none
   -validatePaths priority
   -checkAllNodes 0


Checking your Paths
===================

You can check that the solution path found meets your query requirements 
by using the checkpath executable. This reports if a node or edge is 
found that does not meet query requirements. This is mainly used to double 
check the query stage output during code development.
