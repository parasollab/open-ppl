/**@file Cfg_2D.h
  *A derived class from CfgManager. It provides some specific
  *implementation for a 3-dof rigid-body moving in a 2-D work space.
  *
  *@date 12/21/01
  *@author Jinsuck Kim
  */
////////////////////////////////////////////////////////////////////////////////////////////

#ifndef Cfg_2D_h
#define Cfg_2D_h

////////////////////////////////////////////////////////////////////////////////////////////
//Include obprm headers
#include "Cfg_free.h"

////////////////////////////////////////////////////////////////////////////////////////////
/**
  *A derived class from CfgManager. It provides some specific
  *implementation for a 3-dof rigid-body moving in a 2-D work space.
  */
class Cfg_2D : public Cfg_free {
public:

  ///////////////////////////////////////////////////////////////////////////////////////////
  //
  //
  //    Constructors and Destructor
  //
  //
  //////////////////////////////////////////////////////////////////////////////////////////
  
  //===================================================================
  /**@name  Constructors and Destructor*/
  //===================================================================
  //@{
  ///Degree of freedom is 6 and Degree of freedom for position part is 3.
  Cfg_2D();

  ///Do nothing
  ~Cfg_2D();
  //@}

  ///////////////////////////////////////////////////////////////////////////////////////////
  //
  //
  //    Access Methods : Retrive and set related information of this class
  //
  //
  //////////////////////////////////////////////////////////////////////////////////////////

  virtual Cfg GetRandomCfg(double R, double rStep);
  virtual Cfg GetRandomCfg_CenterOfMass(double *boundingBox);
  virtual Cfg GetRandomRay(double incr);

  ///////////////////////////////////////////////////////////////////////////////////////////
  //
  //
  //    methods for nodes generation 
  //
  //
  //////////////////////////////////////////////////////////////////////////////////////////

  virtual bool GenerateOverlapCfg(Environment *env, int robot,
         Vector3D robot_start, Vector3D robot_goal, Cfg *resultCfg);

  virtual vector<Cfg> GenSurfaceCfgs4ObstNORMAL(Environment * env,
         CollisionDetection *,int obstacle, int nCfgs,
    SID _cdsetid,CDInfo& _cdInfo);
  virtual vector<Cfg> GetCfgByOverlappingNormal(
    Environment * env, CollisionDetection* cd,
    const GMSPolyhedron &polyRobot, const GMSPolyhedron &polyObst,
    int robTri, int obsTri,
    SID _cdsetid, CDInfo& _cdInfo,
    MultiBody *);

  ///////////////////////////////////////////////////////////////////////////////////////////
  //
  //
  //    Helper functions
  //
  //
  //////////////////////////////////////////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////////////////////////////////////////
  //
  //
  //    protected Data member and member methods
  //
  //
  //////////////////////////////////////////////////////////////////////////////////////////
  protected:

  ///////////////////////////////////////////////////////////////////////////////////////////
  //
  //
  //    private Data member and member methods
  //
  //
  //////////////////////////////////////////////////////////////////////////////////////////
  private:

  Cfg ForceItTo2D(Cfg);

};

#endif
