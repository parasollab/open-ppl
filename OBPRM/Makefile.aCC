# $Id$
#------------------------------------------------------
# Make your own and use it or use the one in BASELINE
#------------------------------------------------------

# -- for dynamic shared object library libobprm.sl
   OBPRM_DIR   = .
   OBPRMLIB   = -L${OBPRM_DIR} libobprm.sl

#------------------------------------------------------
# Basic defns; do not change
#------------------------------------------------------
 MATHLIB   = -lm

#-----------------------------------------------------------------------------
# collision detection packages available
#--------------------------------------------------------------------------

 CD_DIR	= /research/sunburn/dsmft/CD-libs/aCC

 RAPID_DIR     = ${CD_DIR}/RAPID
 RAPIDLIB_DIR  = ${RAPID_DIR}
 RAPIDLIB      = -L${RAPIDLIB_DIR} -lRAPID
 RAPID_INCL    = -I${RAPID_DIR}

 PQP_DIR     = ${CD_DIR}/PQP
 PQPLIB_DIR  = ${PQP_DIR}/lib
 PQPLIB      = -L${PQPLIB_DIR} -lPQP
 PQP_INCL    = -I${PQP_DIR}/include

 STAPL_DIR    = /research/sunburn/dsmft/libs/hp/stapl
 STAPLLIB_DIR = ${STAPL_DIR}
 STAPLLIB     = ${STAPL_DIR}/sup_lib/pthread_task.o \
                -L${STAPL_DIR}/lib -Wl,+b -Wl,${STAPL_DIR}/lib \
                -lhoard -lpthread
 STAPL_INCL   = -I${STAPL_DIR}/include \
                -I${STAPL_DIR}/include_stl \
                -I${STAPL_DIR}/include_stl/nongnu

 STL_INCL  = -I${STAPL_DIR}/include_stl 

#-----------------------------------------------------------------------------
# Defines for various types of executables
#	VERBOSE  for printing out all kinds of babble for debugging
#       INTERMEDIATE_FILES for creating intermediate "*.path" files
#--------------------------------------------------------------------------
ADEFS = -DVERBOSE=0 -DINTERMEDIATE_FILES=0 -DCHECKIFSAMECC=1 -DUSE_PQP -DUSE_RAPID 
DEFS = ${ADEFS} -DQUIET

showdefs :: 
	echo "${DEFS}";

AFLAGS    = -I. ${STAPL_INCL} ${STL_INCL} ${CSTK_INCL} ${PQP_INCL} ${RAPID_INCL} ${DEFS}

#-----------------------------------------------------------------------------
# Choose a compiler & its options
#--------------------------------------------------------------------------

CC = aCC
CXX = aCC

# -- for development on TERMINATOR (can't seem to use it better due to cstk)
OPTS = +O2

# -- warnings (default, full, none) --
CWARNS = -w

CFLAGS     = $(OPTS) $(AFLAGS) $(CWARNS)
CXXFLAGS   = $(CFLAGS) +z
DSOFLAGS   = $(CFLAGS) -b

#-----------------------------------------------------------------------------
# Build 
#--------------------------------------------------------------------------

#--------------------------------------------------------------------
deps:: 
	touch Dependencies

libs:: objs libobprm.sl

libobprm.sl:: $(OBJS)
	$(CXX) ${DSOFLAGS} -o $@ $(OBJS) 

#--------------------------------------------------------------------
obprm:: main_obprm.cpp libs
	$(CXX) $(CFLAGS)  -o obprm main_obprm.cpp \
	$(OBPRMLIB) $(MATHLIB) ${STAPLLIB} ${PQPLIB} ${RAPIDLIB}
	rm -f main_obprm.o

#--------------------------------------------------------------------
query:: main_query.cpp libs
	$(CXX) $(CFLAGS)  -o query main_query.cpp \
	$(OBPRMLIB) $(MATHLIB) ${STAPLLIB} ${PQPLIB} ${RAPIDLIB}
	rm -f main_query.o

#--------------------------------------------------------------------
pobprm:: main_pobprm.cpp libs
	$(CXX) $(CXXFLAGS)  -o pobprm main_pobprm.cpp \
        $(OBPRMLIB) $(MATHLIB) ${STAPLLIB} ${PQPLIB} ${RAPIDLIB}
	rm -f main_pobprm.o
#--------------------------------------------------------------------

OBJS = \
	Environment.o \
	FreeBody.o \
	FixedBody.o \
	Connection.o \
	Contact.o \
	DHparameters.o \
	Transformation.o \
	Orientation.o \
	GMSPolyhedron.o \
	Matrix.o \
	Vectors.o \
	Body.o \
	MultiBody.o \
        Parameters.o \
	Input.o \
        Haptic.o \
        Push.o \
	Cfg.o \
	CfgManager.o \
	Cfg_free.o \
	Cfg_fixed_PRR.o \
	Cfg_free_tree.o \
	Cfg_fixed_tree.o \
	util.o \
	Clock_Class.o \
	Stat_Class.o \
	LocalPlanners.o \
	DistanceMetrics.o \
	CollisionDetection.o \
	GenerateMapNodes.o \
	ConnectMapNodes.o \
	Roadmap.o \
	QueryCmds.o \
	Query.o \
	Weight.o

objs:: $(OBJS)

#--------------------------------------------------------------------
runclean::
	rm -f mapnodes.*
	rm -f *.map
	rm -f *.path

clean::
	rm -f query
	rm -f obprm

reallyclean::
	rm -f query
	rm -f obprm
	rm -f *.a *.so
	rm -R -f ii_files
	rm -f *.o
	rm -f so_locations

#-----------------------------------------------------------------------------
# Build and update dependencies
#-----------------------------------------------------------------------------

Dependencies::
	echo >Dependencies "#-*- Makefile -*-"

include Dependencies

