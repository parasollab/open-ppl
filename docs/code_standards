==============
Code Standards
==============

This file contains, for now, a set of discussion points for coding standards.  In the future, this file will describe the codeing standards established and agreed on by the group.

Header (.h, .hpp) vs. Source (.c, .cpp) files
---------------------------------------------
- We should give all header files the same extention.  Choices are .h and .hpp
  * Preferences: Shawna = no preference

- We should give all source files the same extension.  Choices are .c and .cpp
  * Preferences: Shawna = .cpp to help denote that this is c++ code and not c code.

- We should put the implementation for functions (stand alone or class member functions) in the source files, NOT the header files.  This will greatly improve compile times.  Execptions to this rule are:
  * templated functions - these must be implemented in the header files (as required by the compiler)
  * 1 line functions - these may be put in the header files, particularly if they are just wrapper redirects to other functions.

Naming Conventions
------------------
- We should standardize how functions are named in the code.  Choices currently are to separate words with a "_" or by capitalization.
  * Note that stapl uses the "_" convention with all lower case letters.
  * Preferences: Shawna = "_"

- We should standardize how classes are named in the code.   Choices currently are to separate words with a "_" or by capitalization.
  * Note that stapl uses the "_" convention with all lower case letters.
  * Preferences: Shawna = no preference

- We should standardize how class member variables are named in the code.  Choices currently are no standard, starting with "m_", starting with "m_<datatype>" where <datatype> indicates if the variable is a bool, int, vector, etc.
  * Preferences: Shawna = no preference

Code Style Conventions
----------------------
- We should standardize how the code is tabbed (i.e., with x spaces, with the \t character, etc).
  * Preferences: Shawna = no preference

- We should standardize where the opening "{" is placed in function protoype/headers, loop statements, if statements, etc.  Choices are on the same line as the prototype/control statement, on the next line with no tabbing/indentation, on the next line with a tab/indentation
  * Preferences: Shawna = on the next line with no tabbing/indentation

- Comments: code should be commented at a "reasonable" level to aid readability.  Comments should not include large sections of unused code, debugging code, notes about authorship, notes about when the code was modified.  Comments should be editied/cleaned up before committing.

- We should decide how we want to handle persistant/committed debugging statemets.  Choices are at compile time with a -D flag and correspoding macro, at run time where every method / component has a debugging flag variable which may nbe set on xml input, others?.  If we choose a compile time flag, we should decide if this is turned on automatically when debug=1, turned off automatically when debug=0, etc.

- Every method/component should implement a PrintOptions(ostream&) function that simply prints the options availalbe as well as their default values.


