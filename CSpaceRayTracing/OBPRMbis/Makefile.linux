# $Id$
#------------------------------------------------------
# Make your own and use it or use the one in BASELINE
#------------------------------------------------------

# -- for dynamic shared object library libobprm.so
   OBPRM_DIR   = .
   OBPRMLIB   = -L${OBPRM_DIR} -lobprm
   
   Graph_DIR   = ../stapl/include/graph
   Graph_INCL  = -I${Graph_DIR}

#------------------------------------------------------
# Basic defns; do not change
#------------------------------------------------------

#-----------------------------------------------------------------------------
# collision detection packages available
#--------------------------------------------------------------------------
 CD_DIR = /research/sunburn/dsmft/CD-libs/linux

 VCLIP_DIR     = ${CD_DIR}/VCLIP
 VCLIPLIB_DIR  = ${VCLIP_DIR}/lib
 VCLIPLIB      = -L${VCLIPLIB_DIR} -lvclip
 VCLIP_INCL    = -I${VCLIP_DIR}/include

 RAPID_DIR     = ${CD_DIR}/RAPID
 RAPIDLIB_DIR  = ${RAPID_DIR}
 RAPIDLIB      = -L${RAPIDLIB_DIR} -lRAPID
 RAPID_INCL    = -I${RAPID_DIR}

 PQP_DIR     = ${CD_DIR}/PQP
 PQPLIB_DIR  = ${PQP_DIR}/lib
 PQPLIB      = -L${PQPLIB_DIR} -lPQP
 PQP_INCL    = -I${PQP_DIR}/include


#-----------------------------------------------------------------------------
# Defines for various types of executables
#	VERBOSE  for printing out all kinds of babble for debugging
#       INTERMEDIATE_FILES for creating intermediate "*.path" files
#--------------------------------------------------------------------------
   ADEFS = -DVERBOSE=0 -DINTERMEDIATE_FILES=1 -DCHECKIFSAMECC=1  -DUSE_RAPID -DUSE_VCLIP -DUSE_PQP
   DEFS = ${ADEFS} 

showdefs :: 
	echo "${DEFS}";


 AFLAGS    = -I. ${STL_INCL} ${Graph_INCL} ${CSTK_INCL} ${VCLIP_INCL} ${RAPID_INCL} ${PQP_INCL} ${DEFS}

#-----------------------------------------------------------------------------
# Choose a compiler & its options
#--------------------------------------------------------------------------
 CC = g++
#CC = /pub/gnu_sgi/bin/g++

CXX = ${CC}

# -- for development on TERMINATOR (can't seem to use it better due to cstk)
#   OPTS = -g -O2 -fexceptions
#  OPTS = -O2 -fexceptions
  OPTS = -g3
#  OPTS = -o32 -O1 -show -ptv 
# -- optimized (our O2's) (slow_compile/good_code) --
#  OPTS =  -o32 -O2 -OPT:Olimit=0 -show

#  DEPS = 
   DEPS = -MMD #Dependencies 

# -- warnings (default, full, none) --
#  CWARNS = 
#  CWARNS = -fullwarn
   CWARNS = -w

CFLAGS     = $(OPTS) $(AFLAGS) $(DEPS) $(CWARNS)
CFLAGS2    = $(OPTS) $(AFLAGS) $(CWARNS)
CXXFLAGS   = $(CFLAGS) 
DSOFLAGS   = $(CFLAGS) -shared #-no_unresolved

#-----------------------------------------------------------------------------
# Build 
#--------------------------------------------------------------------------

#--------------------------------------------------------------------
deps:: 
	touch Dependencies

libs:: objs libobprm.so

#libobprm.a:: $(OBJS)
#	ar  -rc libobprm.a $(OBJS) 
libobprm.so:: $(OBJS)
	$(CXX)  -o libobprm.so $(DSOFLAGS) $(OBJS)


#--------------------------------------------------------------------
obprm:: main_obprm.cpp libs
	$(CXX) $(CFLAGS2) -o obprm \
                main_obprm.cpp \
		-Wl,-R${PWD}  \
		$(OBPRMLIB) $(MATHLIB) $(CSTKLIB) ${VCLIPLIB} ${RAPIDLIB} ${PQPLIB}
	rm -f main_obprm.o main_obprm.d

#--------------------------------------------------------------------
query:: main_query.cpp libs
	$(CXX) $(CFLAGS2) -o query \
                main_query.cpp \
		-Wl,-R${PWD}  \
                $(OBPRMLIB) $(MATHLIB) $(CSTKLIB) ${VCLIPLIB} ${RAPIDLIB} ${PQPLIB}
	rm -f main_query.o main_query.d

#--------------------------------------------------------------------
growccs:: main_growccs.cpp libs
	$(CXX) $(CFLAGS2) -o growccs \
                main_growccs.cpp \
		-Wl,-R${PWD}  \
                $(OBPRMLIB) $(MATHLIB) $(CSTKLIB) ${VCLIPLIB} ${RAPIDLIB} ${PQPLIB}
	rm -f main_growccs.o main_growccs.d

#--------------------------------------------------------------------
growccs.test:: main_growccs.test.cpp libs
	$(CXX) $(CFLAGS2) -o growccs.test \
                main_growccs.test.cpp \
		-Wl,-R${PWD}  \
                $(OBPRMLIB) $(MATHLIB) $(CSTKLIB) ${VCLIPLIB} ${RAPIDLIB} ${PQPLIB}
	rm -f main_growccs.test.o main_growccs.test.d

#--------------------------------------------------------------------
.SUFFIXES: .cpp
.cpp.o:
	$(CXX) ${CXXFLAGS} -c $<
	cat $*.d >> Dependencies
	rm -f $*.d

% :: %.o
	$(CXX) $(CXXFLAGS) -o $@ $< $(MATHLIB) $(CSTKLIB) ${VCLIPLIB} ${RAPIDLIB} ${PQPLIB}

#--------------------------------------------------------------------

OBJS = \
	Environment.o \
	FreeBody.o \
	FixedBody.o \
	Connection.o \
	Contact.o \
	DHparameters.o \
	Transformation.o \
	Orientation.o \
	GMSPolyhedron.o \
	Matrix.o \
	Vectors.o \
	Body.o \
	MultiBody.o \
	Parameters.o \
	Input.o \
        Haptic.o \
        Push.o \
	Cfg.o \
	CfgManager.o \
	Cfg_free.o \
	Cfg_fixed_PRR.o \
	Cfg_free_tree.o \
	Cfg_fixed_tree.o \
	Cfg_2D.o \
	util.o \
	Clock_Class.o \
	Stat_Class.o \
	LocalPlanners.o \
	DistanceMetrics.o \
	CollisionDetection.o \
	GenerateMapNodes.o \
	ConnectMapNodes.o \
	Roadmap.o \
	QueryCmds.o \
	Query.o \
	Weight.o \
	BasicMAPRM.o \
	ConnectCCsCmds.o \
	ConnectCCs.o \
	RayTracer.o \
	RayCSpace.o \
	ConnectCCMethod.o
	


objs:: $(OBJS)

#--------------------------------------------------------------------
runclean::
	rm -f mapnodes.*
	rm -f *.map
	rm -f *.path

clean::
	rm -f query
	rm -f obprm

reallyclean::
	rm -f query
	rm -f obprm
	rm -f *.a *.so *.o
	rm -R -f ii_files
	rm -f so_locations
	rm -f Dependencies
	touch Dependencies

#-----------------------------------------------------------------------------
# Build and update dependencies
#-----------------------------------------------------------------------------

Dependencies::
	echo >Dependencies "#-*- Makefile -*-"

include Dependencies

