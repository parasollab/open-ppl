<?xml version='1.0' encoding='UTF-8'?>
<MotionPlanning warnings="true" warningsAsErrors="true" print="false">

  <!-- Here we specify input files, such as environment and query. The
       'baseFilename in the Problem node is for Simulator stat output only. -->
  <Problem baseFilename="example">

    <Environment filename="Stacked_Z/tunnel.env"
      frictionCoefficient="0" gravity="0 0 0"/>

    <Robot label="boxy" filename="simpleton/lrobot.obj">
      <!--
      <Agent type="planning"/>
      -->
      <Agent type="pathfollowing" waypointDm="euclideanPosition"
        waypointThreshold=".05"/>
    </Robot>

    <Task label="query" robot="boxy">
      <StartConstraints>
        <!-- WARNING Support for multiple constraints is not yet implemented! -->
        <CSpaceConstraint point="0 0 8 0 0 0"/>
      </StartConstraints>

      <GoalConstraints>
        <!-- Here multiple constraints indicates a compound goal. Each constraint
             represents a single intermediate goal. -->
        <CSpaceConstraint point="-2 0 -8 0 0 0"/>
      </GoalConstraints>
    </Task>

  </Problem>

  <!-- Set available algorithms and parameters. -->
  <Library>

    <DistanceMetrics>
      <Euclidean label="euclidean"/>
    </DistanceMetrics>

    <ValidityCheckers>
      <CollisionDetection label="rapid" method="RAPID"/>
      <CollisionDetection label="pqp" method="PQP"/>
      <CollisionDetection label="pqp_solid" method="PQP_SOLID"/>
    </ValidityCheckers>

    <EdgeValidityCheckers>
      <IntermediatesEdgeValidityChecker label="IEVC" lpLabel="sl" vcLabel="pqp"/>
    </EdgeValidityCheckers>

    <NeighborhoodFinders>
      <BruteForceNF label="BFNF" dmLabel="euclidean" unconnected="false" k="7"/>
      <BruteForceNF label="Nearest" dmLabel="euclidean" unconnected="false"
        k="1"/>
      <BruteForceNF label="BFNFAll" dmLabel="euclidean" k="0"/>
    </NeighborhoodFinders>

    <Samplers>
      <UniformRandomSampler label="UniformRandom" vcLabel="alwaysTrue"/>
      <UniformRandomSampler label="UniformRandomFree" vcLabel="pqp_solid"/>
    </Samplers>

    <LocalPlanners>
      <StraightLine label="sl" binaryEvaluation="true" vcLabel="pqp_solid"/>
      <StraightLine label="slAlwaysTrue" binaryEvaluation="true"
        vcLabel="alwaysTrue"/>
    </LocalPlanners>

    <Extenders>
      <BasicExtender label="BERO" debug="false" dmLabel="euclidean"
        vcLabel="rapid" maxDist="4." minDist=".01"/>
      <BasicExtender label="BESO" debug="false" dmLabel="euclidean"
        vcLabel="rapid" maxDist="10." minDist=".001" randomOrientation="false"/>
    </Extenders>

    <PathModifiers>
    </PathModifiers>

    <Connectors>
      <NeighborhoodConnector label="Closest" debug="true" 
        nfLabel="BFNF" lpLabel="sl" checkIfSameCC="false"/>
      <NeighborhoodConnector label="ToggleConnect" nfLabel="BFNF" lpLabel="sl"
        maxFailures="1" checkIfSameCC="false"/>
      <NeighborhoodConnector label="ClosestAlwaysTrue" nfLabel="BFNF"
        lpLabel="slAlwaysTrue" checkIfSameCC="false"/>
      <CCsConnector label="CCs" debug="false"
        nfLabel="BFNF" lpLabel="slAlwaysTrue" checkIfSameCC="false"/>
    </Connectors>

    <Metrics>
      <NumNodesMetric label="NumNodes"/>
      <NumEdgesMetric label="NumEdges"/>
      <TimeMetric label="TimeInSec"/>
    </Metrics>

    <MapEvaluators>
      <PathEvaluator label="PE" ievcLabel="IEVC" dmLabel="euclidean"/>

      <ClearanceQuery label="ClearanceQuery" eivcLabel="IEVC"/>

      <QueryMethod label="Query" debug="false"
        graphSearchAlg="dijkstras" safeIntervalToolLabel="SI"/>

      <ConditionalEvaluator label="NodesEval" metric_method="NumNodes"
        value="15000" operator=">="/>

      <ConditionalEvaluator label="EdgesEval" metric_method="NumEdges"
        value="1000" operator=">"/>

      <ComposeEvaluator label="ClearanceBoundedQuery" operator="and">
        <Evaluator label="NodesEval"/>
        <Evaluator label="ClearanceQuery"/>
      </ComposeEvaluator>

      <ComposeEvaluator label="BoundedQuery" operator="or">
        <Evaluator label="NodesEval"/>
        <Evaluator label="Query"/>
      </ComposeEvaluator>

      <ComposeEvaluator label="PathEvaluatedQuery" operator="and">
        <Evaluator label="BoundedQuery"/>
        <Evaluator label="PE"/>
      </ComposeEvaluator>

      <ComposeEvaluator label="ClearancePathEvaluatedQuery" operator="and">
        <Evaluator label="ClearanceBoundedQuery"/>
        <Evaluator label="PE"/>
      </ComposeEvaluator>

      <TimeEvaluator label="TimeEval" timeout="10"/>
    </MapEvaluators>

    <MPStrategies>

      <BasicPRM label="BasicPRM-simple" debug="true" querySampler="UniformRandomFree">
        <Sampler label="UniformRandomFree" number="15" attempts="1"/>
        <Connector label="Closest"/>
        <Evaluator label="PathEvaluatedQuery"/>
      </BasicPRM>

      <BasicPRM label="BasicPRM-clearance" debug="true" querySampler="UniformRandomFree">
        <Sampler label="UniformRandomFree" number="15" attempts="1"/>
        <Connector label="Closest"/>
        <Evaluator label="ClearancePathEvaluatedQuery"/>
      </BasicPRM>

    </MPStrategies>

    <MPTools>
      <!-- Example nodes for a workspace decomposition with tetgen. Be aware
           that each decomposition defined will be created immediately upon
           initialization. If you don't need them, comment them out to save
           pre-processing time. These examples would create new decompositions.
      <TetGenDecomposition label="coarse" debug="false" switches="pnQ"/>
      <TetGenDecomposition label="fine" debug="false" switches="pnqQ"/>
      -->

      <!-- The same workspace decomposition nodes, this time reading in from
           saved files like 'coarse.ele' and 'coarse.node'. This is preferred as
           we cannot completely control the randomness in the CGAL functions
           which generate the decompositions. -->
      <!-- <TetGenDecomposition label="coarse" debug="false" switches="pnQ"
        io="read" baseFilename="3D/coarse"/>
      <TetGenDecomposition label="fine" debug="false" switches="pnqQ"
        io="read" baseFilename="3D/quality"/> -->

      <!-- Different objects need to work with different granularities when it
           comes to decomposition-based tools. You can define multiple
           topological maps for this purpose. -->
      <!-- <TopologicalMap label="tm-coarse" decompositionLabel="coarse"
        gridSize="1"/>
      <TopologicalMap label="tm-fine" decompositionLabel="fine"
        gridSize="1"/> -->

      <ReebGraphConstruction debug="false" write="false" filename=""/>

      <!--MedialAxisUtility label="maUtil" vcLabel="pqp_solid"
        dmLabel="euclidean" clearanceType="exact" penetrationType="exact"
        useBBX="true" positional="true"/-->

      <!--SkeletonClearanceUtility label="scu" mauLabel="maUtil"/-->
      <ClearanceUtility label="cu" vcLabel="pqp" dmLabel="euclidean"
        clearanceType="exact" penetrationType="exact" />

      <SafeIntervalTool label="SI" vcLabel="rapid"/>

    </MPTools>

    <!-- MPProblem allows multiple solvers to be specified and executed. -->

    <Solver mpStrategyLabel="BasicPRM-clearance" seed="1234678"
      baseFilename="ztunnel-clearance" vizmoDebug="true"/>

  </Library>


</MotionPlanning>
