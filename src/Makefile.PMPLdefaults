#set platform specific variables
ifeq (${platform}, LINUX_gcc) 	#linux/gcc on 32 bit machine
	UTILS_DEF = -DUSE_VCLIP -DUSE_RAPID -DUSE_PQP -DTIXML_USE_STL #-DUSE_SOLID
	UTILS_INCL = ${VCLIP_INCL} ${RAPID_INCL} ${PQP_INCL} ${TINYXML_INCL} ${MATHTOOL_INCL} ${MODELLOADER_INCL}  #${SOLID_INCL}
	UTILS_LIB = ${VCLIP_LIB} ${RAPID_LIB} ${PQP_LIB} ${TINYXML_LIB} ${MATHTOOL_LIB} ${MODELLOADER_LIB} ${KMEANS_LIB} #${SOLID_LIB}
	
	CD_LIBFILE = ${VCLIP_DIR}/lib/libvclip.a ${RAPID_DIR}/libRAPID.a ${PQP_DIR}/lib/libPQP.a #${SOLID_DIR}/lib/libsolid.a

	BOOST_INCL = -isystem/usr/include

	DEPS = -MMD -MF $*.d
endif

ifeq (${platform}, LINUX_gcc_mh) 	#linux/gcc on manhattan
	#temporarily remove VCLIP - does not compile because of hash map
	UTILS_DEF =   -DUSE_RAPID -DUSE_PQP -DTIXML_USE_STL #-DUSE_SOLID
	UTILS_INCL =   ${RAPID_INCL} ${PQP_INCL} ${TINYXML_INCL} ${MATHTOOL_INCL} ${MODELLOADER_INCL}  #${SOLID_INCL}
	UTILS_LIB =   ${RAPID_LIB} ${PQP_LIB} ${TINYXML_LIB} ${MATHTOOL_LIB} ${MODELLOADER_LIB} ${KMEANS_LIB} #${SOLID_LIB}
	
	CD_LIBFILE =   ${RAPID_DIR}/libRAPID.a ${PQP_DIR}/lib/libPQP.a #${SOLID_DIR}/lib/libsolid.a

	#use same boost as used in STAPL
	BOOST_ROOT = /usr/local
	BOOST_INCL = -I$(BOOST_ROOT)/include
	Boost_LIBRARY_DIRS = $(BOOST_ROOT)/lib
	#Boost_LIBRARIES = -L$(Boost_LIBRARY_DIRS) -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_thread | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g') -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_date_time | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g')
	BOOST_LIB = -L$(Boost_LIBRARY_DIRS) -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_thread | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g') -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_serialization | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g') -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_date_time | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g')

	DEPS = -MMD -MF $*.d
endif

ifeq (${platform}, LINUX_64_gcc) 	#linux/gcc on 64 bit machine
	#UTILS_DEF = -DUSE_VCLIP -DUSE_RAPID -DUSE_PQP -DTIXML_USE_STL #-DUSE_SOLID
	UTILS_DEF = -DUSE_VCLIP -DUSE_RAPID -DUSE_PQP -DTIXML_USE_STL #-DUSE_SOLID
	#UTILS_INCL = ${VCLIP_INCL} ${RAPID_INCL} ${PQP_INCL} ${TINYXML_INCL} ${MATHTOOL_INCL} ${MODELLOADER_INCL}  #${SOLID_INCL}
	UTILS_INCL = ${RAPID_INCL} ${PQP_INCL} ${TINYXML_INCL} ${MATHTOOL_INCL} ${MODELLOADER_INCL}  #${SOLID_INCL}
	UTILS_LIB = ${VCLIP_LIB} ${RAPID_LIB} ${PQP_LIB} ${TINYXML_LIB} ${MATHTOOL_LIB} ${MODELLOADER_LIB} ${KMEANS_LIB} #${SOLID_LIB}
	
	CD_LIBFILE = ${VCLIP_DIR}/lib/libvclip.a ${RAPID_DIR}/libRAPID.a ${PQP_DIR}/lib/libPQP.a #${SOLID_DIR}/lib/libsolid.a

	BOOST_ROOT = /usr
	BOOST_INCL = -I$(BOOST_ROOT)/include
	ifeq (${parallel}, 1)
	  #uses latest version of boost (use module avail to check)
	  Boost_LIBRARY_DIRS = $(BOOST_ROOT)/lib
	  BOOST_LIB = -L$(Boost_LIBRARY_DIRS) -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_serialization | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g')
	else
	  Boost_LIBRARY_DIRS = $(BOOST_ROOT)/lib64
	  BOOST_LIB = -L$(Boost_LIBRARY_DIRS) -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_thread | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g') -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_serialization | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g') -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_date_time | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g')
	endif
	DEPS = -MMD -MF $*.d
endif

ifeq (${platform}, LINUX_gcc_brazos) 	#linux/gcc on brazos(brazos.tamu.edu)
	UTILS_DEF =   -DUSE_RAPID -DUSE_PQP -DTIXML_USE_STL #-DUSE_SOLID
	UTILS_INCL =  ${RAPID_INCL} ${PQP_INCL} ${TINYXML_INCL} ${MATHTOOL_INCL} ${MODELLOADER_INCL}  #${SOLID_INCL}
	UTILS_LIB =    ${RAPID_LIB} ${PQP_LIB} ${TINYXML_LIB} ${MATHTOOL_LIB} ${MODELLOADER_LIB} #${SOLID_LIB}
	CD_LIBFILE =   ${RAPID_DIR}/libRAPID.a ${PQP_DIR}/lib/libPQP.a #${SOLID_DIR}/lib/libsolid.a
	#use same boost as used in STAPL
        BOOST_ROOT = /home/ipapadop/usr
        BOOST_INCL = -I$(BOOST_ROOT)/include
        Boost_LIBRARY_DIRS = $(BOOST_ROOT)/lib
	BOOST_LIB = -L$(Boost_LIBRARY_DIRS) -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_serialization | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g')

	DEPS = -MMD -MF $*.d
endif

ifeq (${platform}, AIX_64_gcc)	#aix/64-bit/gcc (e.g., hydra.tamu.edu)
	UTILS_DEF = -DUSE_VCLIP -DUSE_RAPID -DUSE_PQP -DTIXML_USE_STL #-DUSE_SOLID
	UTILS_INCL = ${VCLIP_INCL} ${RAPID_INCL} ${PQP_INCL} ${TINYXML_INCL} ${MATHTOOL_INCL} ${MODELLOADER_INCL}  #${SOLID_INCL}
	UTILS_LIB = ${VCLIP_LIB} ${RAPID_LIB} ${PQP_LIB} ${TINYXML_LIB} ${MATHTOOL_LIB} ${MODELLOADER_LIB} ${KMEANS_LIB} #${SOLID_LIB}

	CD_LIBFILE = ${VCLIP_DIR}/lib/libvclip.a ${RAPID_DIR}/libRAPID.a ${PQP_DIR}/lib/libPQP.a #${SOLID_DIR}/lib/libsolid.a

	BOOST_INCL = -I/scratch/shawnat/usr/include/boost-1_33_1

	DEPS = -MMD -MF $*.d
endif	

ifeq (${platform}, AIX_64_xlC)	#aix/64-bit/native compiler (e.g., hydra.tamu.edu)
	UTILS_DEF = -DUSE_RAPID -DUSE_PQP -DTIXML_USE_STL #-DUSE_SOLID
	UTILS_INCL = ${RAPID_INCL} ${PQP_INCL} ${TINYXML_INCL} ${MATHTOOL_INCL} ${MODELLOADER_INCL}  #${SOLID_INCL}
	UTILS_LIB = ${RAPID_LIB} ${PQP_LIB} ${TINYXML_LIB} ${MATHTOOL_LIB} ${MODELLOADER_LIB} ${KMEANS_LIB} #${SOLID_LIB}

	CD_LIBFILE = ${RAPID_DIR}/libRAPID.a ${PQP_DIR}/lib/libPQP.a #${SOLID_DIR}/lib/libsolid.a

	BOOST_INCL = -I/scratch/shawnat/usr/include/boost-1_33_1

	DEPS = -M -MF $*.d
endif

ifeq (${platform}, MACOS_gcc) 	#fink/gcc on 64 bit machine
	UTILS_DEF = -DUSE_VCLIP -DUSE_RAPID -DUSE_PQP -DTIXML_USE_STL #-DUSE_SOLID
	UTILS_INCL = ${VCLIP_INCL} ${RAPID_INCL} ${PQP_INCL} ${TINYXML_INCL} ${MATHTOOL_INCL} ${MODELLOADER_INCL}  #${SOLID_INCL}
	UTILS_LIB = ${VCLIP_LIB} ${RAPID_LIB} ${PQP_LIB} ${TINYXML_LIB} ${MATHTOOL_LIB} ${MODELLOADER_LIB} ${KMEANS_LIB} #${SOLID_LIB}
	
	CD_LIBFILE = ${VCLIP_DIR}/lib/libvclip.a ${RAPID_DIR}/libRAPID.a ${PQP_DIR}/lib/libPQP.a #${SOLID_DIR}/lib/libsolid.a

	BOOST_ROOT = /sw
	BOOST_INCL = -I$(BOOST_ROOT)/include
	ifeq (${parallel}, 1)
	  #uses latest version of boost (use module avail to check)
	  Boost_LIBRARY_DIRS = $(BOOST_ROOT)/lib
	  BOOST_LIB = -L$(Boost_LIBRARY_DIRS) -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_serialization | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g')
	else
	  Boost_LIBRARY_DIRS = $(BOOST_ROOT)/lib64
	  BOOST_LIB = -L$(Boost_LIBRARY_DIRS) -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_thread | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g') -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_serialization | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g') -l$(shell ls $(Boost_LIBRARY_DIRS) | grep -m 1 -e boost_date_time | sed 's/lib//g' | sed 's/\.so//g' | sed 's/\.a//g')
	endif
	DEPS = -MMD -MF $*.d
endif



#set debug specific variables
ifeq (${debug}, 0)
else
	ifeq (${debug}, 1)
	else
		@echo ""
		@echo "Invalid debug value: ${debug}"
		@echo "debug must be either 0 or 1"
		@echo ""
	endif
endif


# collision detection macros and targets
CD_DIR = ${UTILS_DIR}/geom/CD-libs

QHULL_DIR = ${CD_DIR}/qhull-2010.1/src
${QHULL_DIR}/libqhull.a:
	cd ${QHULL_DIR}; ${MAKE} platform=${platform} debug=${debug}

VCLIP_DIR = ${CD_DIR}/VCLIP
VCLIP_LIB = -L${VCLIP_DIR}/lib -lvclip -L${QHULL_DIR} -lqhull
VCLIP_INCL = -I${VCLIP_DIR}/include
${VCLIP_DIR}/lib/libvclip.a: ${QHULL_DIR}/libqhull.a
	cd ${VCLIP_DIR}; ${MAKE} platform=${platform} debug=${debug}

RAPID_DIR = ${CD_DIR}/RAPID
RAPID_LIB = -L${RAPID_DIR} -lRAPID
RAPID_INCL = -I${RAPID_DIR}
${RAPID_DIR}/libRAPID.a:
	cd ${RAPID_DIR}; ${MAKE} platform=${platform} debug=${debug}

PQP_DIR = ${CD_DIR}/PQP_v1.2
PQP_LIB = -L${PQP_DIR}/lib -lPQP
PQP_INCL = -I${PQP_DIR}/include
${PQP_DIR}/lib/libPQP.a:
	cd ${PQP_DIR}; ${MAKE} platform=${platform} debug=${debug}

SOLID_DIR = ${CD_DIR}/solid-3.5.6
SOLID_LIB = -L${SOLID_DIR}/lib -lsolid 
SOLID_INCL = -I${SOLID_DIR}/include -I${SOLID_DIR}/src/convex
${SOLID_DIR}/lib/libsolid.a:
	cd ${CD_DIR}; ${MAKE} solid


# xml macros and targets
TINYXML_DIR = ${UTILS_DIR}/xml/tinyxml
TINYXML_LIB = -L${TINYXML_DIR} -ltinyxml
TINYXML_INCL = -I${TINYXML_DIR}
${TINYXML_DIR}/libtinyxml.a: 
	cd ${TINYXML_DIR}; ${MAKE} platform=${platform} debug=${debug}

XML_LIBFILE = ${TINYXML_DIR}/libtinyxml.a

# mathtool
MATHTOOL_DIR = ${UTILS_DIR}/mathtool
MATHTOOL_LIB = -L${MATHTOOL_DIR} -lmathtool
MATHTOOL_INCL = -I${MATHTOOL_DIR}
${MATHTOOL_DIR}/libmathtool.a: 
	cd ${MATHTOOL_DIR}; ${MAKE} platform=${platform} debug=${debug}

MATHTOOL_LIBFILE = ${MATHTOOL_DIR}/libmathtool.a

# modelloader
MODELLOADER_DIR = ${UTILS_DIR}/modelloader
MODELLOADER_LIB = -L${MODELLOADER_DIR} -lmodloader
MODELLOADER_INCL = -I${MODELLOADER_DIR}
${MODELLOADER_DIR}/libmodloader.a: 
	cd ${MODELLOADER_DIR}; ${MAKE} platform=${platform} debug=${debug}

MODELLOADER_LIBFILE = ${MODELLOADER_DIR}/libmodloader.a

#kmeans
KMEANS_DIR = ${UTILS_DIR}/Kmeans
KMEANS_LIB = -L${KMEANS_DIR} -lkmeans
KMEANS_INCL = -I${KMEANS_DIR}
${KMEANS_DIR}/libkmeans.a:
	cd ${KMEANS_DIR}; ${MAKE} platform=${platform} debug=${debug}

KMEANS_LIBFILE = ${KMEANS_DIR}/libkmeans.a

# stapl macros
#set parallel PRM options
ifeq (${parallel}, 0)
	STAPL_INCL  = -I${STAPL_DIR}/include 
else
	STAPL_INCL  = -I${STAPL_DIR} -I${STAPL_DIR}/include -I${STAPL_DIR}/tools  -I${STAPL_DIR}/tools/libstdc++/${STL_LIB}/ -I${STAPL_DIR}/tools/icl
        STAPL_DEF = -D_PARALLEL -D_STAPL -D_STAPL_MPI -D_PGRAPH -DDYNAMIC_GRAPH
        STAPL_LIB = ${STAPL_DIR}/lib/runtime.o -lrt $(BOOST_LIB)
endif

#CGAL macros
CGAL_INCL = -I${UTILS_DIR}/geom/CGAL-3.3.1/include
CGAL_DEF = -DCGAL_NO_ASSERTIONS -DCGAL_NO_PRECONDITIONS

#MPNN macros and targets
MPNN_DIR = ${UTILS_DIR}/nearest_neighbors/MPNN
MPNN_SRC = ${MPNN_DIR}/src
MPNN_LIB = -L${MPNN_DIR}/src -lMPNN
MPNN_INCL = -I${MPNN_DIR}/include
MPNN_LIBFILE = ${MPNN_DIR}/src/libMPNN.a
${MPNN_LIBFILE}:
	cd ${MPNN_DIR}/src; ${MAKE} platform=${platform} debug=${debug}

# pmpl macros
PMPL_LIB = -L${PMPL_DIR} -lobprm
PMPL_LIBFILE =${PMPL_DIR}/libobprm.a
PMPL_INCL = \
	-I${PMPL_DIR} \
	-I${PMPL_DIR}/Cfg \
	-I${PMPL_DIR}/Connector \
	-I${PMPL_DIR}/DistanceMetric \
	-I${PMPL_DIR}/LocalPlanner \
	-I${PMPL_DIR}/MapEvaluator \
	-I${PMPL_DIR}/MPProblem \
	-I${PMPL_DIR}/MPStrategy/Entropy \
	-I${PMPL_DIR}/MPProblem/Geometry \
	-I${PMPL_DIR}/MPStrategy \
	-I${PMPL_DIR}/Samplers \
	-I${PMPL_DIR}/Utilities \
	-I${PMPL_DIR}/ValidityChecker \
	-I${PMPL_DIR}/NeighborhoodFinder \
	-I${PMPL_DIR}/Partitioning \
	-I${PMPL_DIR}/Partitioning/Features \
	-I${PMPL_DIR}/Partitioning/PartitioningEvaluators

PMPL_OBJS = \
	MPProblem/Geometry/FreeBody.o \
	MPProblem/Geometry/FixedBody.o \
	MPProblem/Geometry/Connection.o \
	MPProblem/Geometry/Contact.o \
	MPProblem/Geometry/DHparameters.o \
	MPProblem/Geometry/Transformation.o \
	MPProblem/Geometry/Orientation.o \
	MPProblem/Geometry/GMSPolyhedron.o \
	MPProblem/Geometry/Body.o \
	MPProblem/Geometry/MultiBody.o \
	Cfg/Cfg.o \
	Cfg/Cfg_free.o \
	Cfg/Cfg_free_tree.o \
	Cfg/Cfg_free_tree_2dof.o \
	Cfg/Cfg_fixed_tree.o \
	Cfg/Cfg_2D.o \
	Cfg/Cfg_2D_withRot.o \
	Cfg/VirtualLink.o \
	Cfg/Cfg_reach_cc.o \
	Cfg/Cfg_reach_cc_fixed.o \
	Cfg/Cfg_free_multi.o \
	MPProblem/Environment.o \
	MPProblem/ClosedChainProblem.o \
        Utilities/MetricUtils.o \
        Utilities/IOUtils.o \
        Utilities/MPUtils.o \
	DistanceMetric/DistanceMetricMethod.o \
	DistanceMetric/DistanceMetrics.o \
	DistanceMetric/EuclideanDistance.o \
	DistanceMetric/ScaledEuclideanDistance.o \
	DistanceMetric/UniformEuclideanDistance.o \
	DistanceMetric/PureEuclideanDistance.o \
	DistanceMetric/KnotTheoryDistance.o \
	DistanceMetric/CenterOfMassDistance.o \
	DistanceMetric/ManhattanDistance.o \
	DistanceMetric/MinkowskiDistance.o \
	DistanceMetric/MinkowskiDistance.o \
	DistanceMetric/RMSDDistance.o \
	DistanceMetric/ReachableDistance.o \
	DistanceMetric/LPSweptDistance.o \
	DistanceMetric/BinaryLPSweptDistance.o \
	ValidityChecker/CollisionDetection.o \
	ValidityChecker/NodeClearanceValidity.o \
        ValidityChecker/MedialAxisClearanceValidity.o \
	MPProblem/Weight.o \
	MPProblem/Boundary.o \
        MPProblem/BoundingBox.o \
	MPStrategy/MPStrategyMethod.o \
	MPStrategy/MPStrategy.o \
	NeighborhoodFinder/NeighborhoodFinderMethod.o \
	MPProblem/MPProblem.o \
	NeighborhoodFinder/MPNNWrapper.o \

ifeq (${parallel}, 0)
	PMPL_OBJS+= \
	MPStrategy/BasicPRM.o \
	MPStrategy/BasicRRTStrategy.o \
	MPStrategy/MARRTStrategy.o \
	MPStrategy/OBRRTStrategy.o \
	MPStrategy/TogglePRMStrategy.o \
	MPStrategy/HybridPRM.o \
	MPStrategy/QueryStrategy.o \
	MPStrategy/SmoothQueryStrategy.o \
        MPStrategy/ResamplePointStrategy.o \
	MPStrategy/EvaluateMapStrategy.o \
	MPStrategy/ClosedChainStrategy.o \
	MPStrategy/UAStrategy.o \
	MPStrategy/RRGStrategy.o \
	MapEvaluator/NumNodesEvaluation.o \
	MapEvaluator/NumEdgesEvaluation.o \
	MapEvaluator/PrintMapEvaluation.o \
	Partitioning/Partition.o \
	Partitioning/PartitioningMethod.o \
	Partitioning/KMeans.o \
	Partitioning/GrowablePartitions.o \
	Partitioning/HierarchicalClustering.o \
	Partitioning/PGMeansClustering.o \
	Partitioning/SuccessiveClustering.o \
	Partitioning/PartitioningMethods.o \
	Partitioning/PartitionTree.o \
	Partitioning/Features/Features.o \
	Partitioning/Features/CfgFeature.o \
	Partitioning/Features/VisibilityFeature.o \
	Partitioning/Features/ClearanceFeature.o \
	Partitioning/PartitioningEvaluators/PartitioningEvaluators.o \
	Partitioning/PartitioningEvaluators/STDEvaluator.o \
	Partitioning/PartitioningEvaluators/AVGEvaluator.o
endif

