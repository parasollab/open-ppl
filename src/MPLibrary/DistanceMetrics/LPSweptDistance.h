#ifndef PMPL_LP_SWEPT_DISTANCE_H_
#define PMPL_LP_SWEPT_DISTANCE_H_

#include "DistanceMetricMethod.h"


////////////////////////////////////////////////////////////////////////////////
/// Measures the distance swept by a robot when moving between two
/// configurations. The distance is the summed vertex displacements along the
/// path generated by the LocalPlanner.
///
///
/// @ingroup DistanceMetrics
////////////////////////////////////////////////////////////////////////////////
class LPSweptDistance : virtual public DistanceMetricMethod {

  public:

    ///@name Local Types
    ///@{

    typedef typename MPBaseObject::GroupCfgType GroupCfgType;

    ///@}
    ///@name Construction
    ///@{

    LPSweptDistance(string _lpLabel="sl", double _positionRes = 0.1,
        double _orientationRes = 0.1, bool _bbox = false);
    LPSweptDistance(XMLNode& _node);
    virtual ~LPSweptDistance() = default;

    ///@}
    ///@name MPBaseObject Overrides
    ///@{

    virtual void Print(std::ostream& _os) const override;

    ///@}
    ///@name DistanceMetricMethod Overrides
    ///@{

    virtual double Distance(const Cfg& _c1, const Cfg& _c2) override;

    ///@}

  protected:

    ///@name Helpers
    ///@{

    double SweptDistance(const std::vector<GMSPolyhedron>& _poly1,
        const std::vector<GMSPolyhedron>& _poly2);

    ///@}
    ///@name Internal State
    ///@{

    string m_lpLabel;         ///< For Local Planner type
    double m_positionRes;     ///< For position resolution
    double m_orientationRes;  ///< For orientation resolution
    bool m_useBBox;           ///< for whether to use bounding box

    ///@}
};

#endif
