input = [bodies_vw tree_stapl_vw]
L0  = map(generateBodies)[bodies_vw] # Generate Bodies
v1  = zip_reduce<1>(getLocalBounds allReduceBounds) [L0] # Calculate Global Bounds
v2  = broadcast_to_locs() [v1] # Broadcast
v3  = zip<3>(calculateBucketSizez) [L0 tree_stapl_vw v2] # Domain Decomposition
v4  = alltoall<Bodies>(tags::flat()) [v3] # Exchange Partitions
v5  = map(flattenBodies) [v4]
v6  = map(getNewLocalBounds) [v5] # Calculate Local Bounds
v7  = zip<2>(buildTree) [v5 v6] # Build Tree
v8  = zip<2>(getCellBounds) [v7 v6] # Get Cell Bounds
v9  = zip<2>(updwardPass) [v7 v5] # Upward Pass
v10 = allGatherBounds [v8] # Gather Bounds
v11 = zip<2>(setReceivedBounds) [tree_stapl_vw v10]
v12 = zip<3>(setLET) [v11 v9 tree_stapl_vw] # Build LET
v13 = zip<2>(prepareSendBodies) [v12 tree_stapl_vw]
v14 = alltoall<Bodies> [v13] # Send LET Bodies
v15 = zip<2>(prepareSendCells) [v14 tree_stapl_vw]
v16 = alltoall<Cells> [v15] # Send LET Cells
v17 = map(dualTreeTraversal)[v9] # Dual Tree Traversal
v18 = zip<5>(get_let)[v14 v16 tree_stapl_vw v17 v5] # Get LET for each Rank
v19 = map(downward_pass)[v18] # Downward Pass
v20 = zip<4>(keepAlive)[v19 v5 tree_stapl_vw]
output = [v20]
